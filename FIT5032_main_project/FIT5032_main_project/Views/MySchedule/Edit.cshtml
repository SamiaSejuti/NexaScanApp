@model FIT5032_main_project.Models.Schedule

@{
    ViewBag.Title = "Edit Schedule";
}

<h2>Edit Schedule</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ScheduleId)
    @Html.HiddenFor(model => model.DoctorId)

<div class="form-horizontal">
    <h4>Schedule</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <!-- Day of Week -->
    <div class="form-group">
        @Html.LabelFor(model => model.ScheduleDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.ScheduleDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
            @Html.ValidationMessageFor(model => model.ScheduleDate, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="mb-2"></div>
    <!-- Start Time -->
    <div class="form-group">
        @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control", @type = "time" } })
            @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="mb-2"></div>
    <!-- End Time -->
    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="EndTime">End Time</label>
        <input type="time" id="EndTime" name="EndTime" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" readonly>
    </div>

    <script>
        // Function to calculate end time based on start time
        function calculateEndTime(startTime) {
            // Parse the selected start time
            const [hours, minutes] = startTime.split(":");
            const startHour = parseInt(hours);
            const startMinute = parseInt(minutes);

            // Calculate end time
            const endHour = startHour + 1;
            const endMinute = startMinute;

            // Format end time as HH:mm
            const formattedEndTime = `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`;

            return formattedEndTime;
        }

        // Event listener to update end time when start time changes
        document.getElementById("StartTime").addEventListener("change", function () {
            const startTime = this.value;
            const endTime = calculateEndTime(startTime);
            document.getElementById("EndTime").value = endTime;
        });
    </script>

    <!-- Submit Button -->
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save Schedule" class="btn btn-default" />
        </div>
    </div>
</div>
}
